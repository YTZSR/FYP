Prometheus Application

Command:
    Prometheus: ./prometheus
    Node exporter: ./node_exporter
    Grafana: ./bin/grafana-server

data model:
    metric name: general feature
        Metric types(not used on prometheus server yet, but used in client API):
            Counter: 累积叠加，只可增加或重置为0
            Gauge(计量器): 可任意加减的数值，通常为测量值。也可用于计数
            Histogram(柱状图)： e.g. durations, size => 对应一个base name
                counter: <basename>_bucket{...}
                sum: <basename>_sum {...}
                counts of event: <basename>_bucket{...}
            Summary(similar with histogram)
    labels(key/value optional)
    (Notation表示: <metric name>{<label name>=<label value>, ...})

Components:
    main Prometheus Server: 抓取&存储 TSD
        从Pushgateway（短期，间接）和其他exporter（长期，直接）提取metrics
        alert: to AlertManager
        Query: PromQL(WebUI, Grafana), etc.

    client library: 放在客户端代码内部的库（调用Prometheus）
    push gateway: 写入(短期任务，管理连接)
    exporter: 外部API

    instance: an endpoint
    job: a collection of instances
    (当Prometheus 读取数据时会自动加入一些标签，e.g. job, instance用于分辨定位)

Advantages:
    Work well for purely numeric TSD
    machine-centric monitoring & monitoring of highly dynamic service-oriented architectures
    support for multi-dimensional data collection(multi labels)
    Better in Query
    High Relibility, Standalone Server

Disadvantages: accuracy

PromQL语法：
    expression data type: 
        instant vector: 同一时间下不同TSD的值
        range vector: 在一定范围内不同TSD的值
        scalar: a simple numeric floating point

    selector:
        instant vector selector: 在某一个时间点的对应TSD的值（点筛选）
            filter: "=", "!=", "=~"(regex-match, 正则表达式匹配)，"!~"
            label "__name__" = <metric_name>, 当metric name 与keyword(on, bool, ignoring, group_left, group_right) 相同时可用label筛选
            e.g. http_request_total 所有TSD中metric名为此的数据
                 http_requests_total{job="prometheus",group="canary"} (label filter)
                 http_requests_total{environment=~"staging|testing|development",method!="GET"}
        range vector selector: 在某一个时间范围内的TSD的值
            在grammer 最后加入[<time>], 可用s,m,h,d,w,y
            e.g. http_requests_total{job="prometheus"}[5m]
        offset modifier: allows changing the time offset for individual instant and range vectors in a query.
    
    operators: 
        binary operators:
            arithmetic binary operators: +, -, *, /, %, ^
            comparison binary opeartors: ==, !=, >, <, >=, <=
            logical/set binary operators: and, or, unless

            precedence 优先级:
                1. ^
                2. *, /, %
                3. +, -
                4. ==, !=, <=, <, >=, >
                5. and, unless
                6. or 

        vector matching: find a matching element in the right-hand side vector for each entry in the left-hand side
                        (从左侧提取record, 根据条件在右侧寻找匹配项)
            one-to-one: find a unique pair of entries
                <vector expr> <binary-op> ignoring(<label list>) <vector expr>
                <vector expr> <binary-op> on(<label list>) <vector expr>
                igonring: 忽略对应的label的限制
                on: 只在这之中的label进行限制
            
            many-to-one/one-to-many: (binary opeartors here are just arthmetic & comparison operators)
                <vector expr> <bin-op> ignoring/on(<label list>) group_left(<label list>) <vector expr>
                <vector expr> <bin-op> ignoring/on(<label list>) group_right(<label list>) <vector expr>
                (决定以左侧还是右侧为准进行分组，顺序会不同)
                e.g. method_code:http_errors:rate5m / ignoring(code) group_left method:http_requests:rate5m
                    output  {method="get", code="500"}  0.04            
                            {method="get", code="404"}  0.05            
                            {method="post", code="500"} 0.05            
                            {method="post", code="404"} 0.175           
        
        aggregation operators: 
            sum, min, max, avg, count
            stddev: calculate population standard deviation over dimensions 标准差
            stdvar: calculate population standard variance over dimensions 方差
            count_values(para): # of elements with same value
            topk/bottomk(para): largest/smallest k elements by sample value
            quantile(para): calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions 分位数， 在总体排名某百分比的值

            <aggr-op> [without|by (<label list>)] ([parameter,] <vector expression>)
         or <aggr-op>([parameter,] <vector expression>) [without|by (<label list>)]
            e.g sum without (instance) (http_requests_total)
                count_values("version", build_version)
                topk(5, http_requests_total)

    search: (all need time when given a value)
        promhttp_metric_handler_requests_total  (name)
        promhttp_metric_handler_requests_total{code="200"}   (name {lables & value})
        rate(promhttp_metric_handler_requests_total{code="200"}[1m]) 比例
    query key: name, lables, time
绘图时便会根据所有时间点的数据进行串联

Adding database: set name and address configs in prometheus.yml

Grafana: 可读取promethues 的数据，利用不同dashboard 的模板以及对应的query 进行可视化管理
 

Links:
1. Bufio.Writer: https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter01/01.4.html
2. Hash Function: https://zhuanlan.zhihu.com/p/38411551
3. GO Language: https://draveness.me/golang/
4. GO function vs method: https://www.flysnow.org/2017/03/31/go-in-action-go-method.html
5. Big Endian: https://songlee24.github.io/2015/05/02/endianess/

Questions:
1. chunks.go: maxLen为什么最开始要加入chunks的数量？虽然不会被存入硬盘但是在判断空间上会产生影响。
2. chunks.go: seq的作用？ Ref的作用？
3. bstream.go: 在读取的时候为何尾部的stream不能为空？
4. 为何要把bstream 和 XORChunk 分开？